{"version":3,"sources":["Todo.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","e","preventDefault","updateTodo","target","value","toggleTodo","result","className","onSubmit","type","name","onChange","onClick","completed","Component","TodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","JSON","parse","window","localStorage","getItem","create","remove","update","toggleComplete","newTodo","st","setItem","stringify","filter","todo","updatedTask","updatedTodos","map","key","App","toggled","darkStyle","backgroundColor","style","title","defaultChecked","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.edfbeb82.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task,\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n\n  handleUpdate(e) {\n    e.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n\n  handleChange(e) {\n    this.setState({\n      task: e.target.value,\n    });\n  }\n\n  handleToggle() {\n    this.props.toggleTodo(this.props.id);\n  }\n\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div className=\"form\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className=\"task-text\">\n          <li className=\"Todo-task\" onClick={this.handleToggle}>\n            {this.props.task}\n          </li>\n        </div>\n      );\n    }\n    return (\n      <div className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\n        {result}\n        <div className=\"Todo-buttons\">\n          <button onClick={this.toggleForm}>\n            <i className=\"fas fa-pen\" />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i className=\"fas fa-trash\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport './TodoForm.css';\n\nclass TodoForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            task: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e){\n        this.setState({ [e.target.name] : e.target.value })\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.createTodo({...this.state, id: uuid(), completed: false });\n        this.setState({ task:\"\" })\n    }\n\n    render(){\n        return (\n            <form className=\"TodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Task:</label>\n                <input type=\"text\" placeholder=\"Task\" id=\"task\" name=\"task\" value={this.state.task} onChange={this.handleChange} />\n                <button>Add</button>\n            </form>\n        )\n    }\n}\n\nexport default TodoForm;","import React, { Component } from \"react\";\nimport Todo from \"./Todo\";\nimport TodoForm from \"./TodoForm\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\"),\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleComplete = this.toggleComplete.bind(this);\n  }\n\n  create(newTodo) {\n    this.setState(\n      (st) => ({\n        todos: [...this.state.todos, newTodo],\n      }),\n      () =>\n        window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n    );\n  }\n\n  remove(id) {\n    this.setState(\n      (st) => ({\n        todos: this.state.todos.filter((todo) => todo.id !== id),\n      }),\n      () =>\n        window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n    );\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState(\n      (st) => ({ todos: updatedTodos }),\n      () =>\n        window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n    );\n  }\n\n  toggleComplete(id) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState(\n      (st) => ({ todos: updatedTodos }),\n      () =>\n        window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n    );\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo) => {\n      return (\n        <Todo\n          key={todo.id}\n          id={todo.id}\n          task={todo.task}\n          removeTodo={this.remove}\n          updateTodo={this.update}\n          completed={todo.completed}\n          toggleTodo={this.toggleComplete}\n        />\n      );\n    });\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          My Todo List <i className=\"fas fa-book-open\"></i>\n        </h1>\n\n        <TodoForm createTodo={this.create} />\n        <ul>{todos}</ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggled: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange() {\n    this.setState({ toggled: !this.state.toggled });\n  }\n\n  render() {\n    let darkStyle = {\n      backgroundColor: this.state.toggled ? \"rgb(46, 45, 45)\" : \"white\",\n    };\n    return (\n      <div className=\"App\" style={darkStyle}>\n        <div className=\"App-toggle\">\n          <label\n            className=\"switch\"\n            htmlFor=\"checkbox\"\n            title=\"Change color scheme to dark mode\"\n          >\n            <input\n              type=\"checkbox\"\n              id=\"checkbox\"\n              defaultChecked={this.state.toggled}\n              onChange={this.handleChange}\n            />\n            <div className=\"slider round\"></div>\n            <div className=\"toggle-moon\">\n              <span role=\"img\" aria-label=\"moon\">\n                🌙\n              </span>\n            </div>\n            <div className=\"toggle-sun\">\n              <span role=\"img\" aria-label=\"sun\">\n                ☀️\n              </span>\n            </div>\n          </label>\n        </div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}