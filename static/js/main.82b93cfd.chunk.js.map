{"version":3,"sources":["Todo.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","e","preventDefault","updateTodo","target","value","toggleTodo","result","classNames","className","onSubmit","type","name","onChange","onClick","completed","class","Component","TodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleComplete","newTodo","filter","todo","updatedTask","updatedTodos","map","key","App","toggled","darkStyle","backgroundColor","style","for","title","defaultChecked","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82b93cfd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleRemove(){\n        this.props.removeTodo(this.props.id);\n    }\n\n    toggleForm(){\n        this.setState({ isEditing: !this.state.isEditing });\n    }\n\n    handleUpdate(e){\n        e.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({ isEditing: false })\n    }\n\n    handleChange(e){\n        this.setState({\n            task: e.target.value\n        })\n    }\n\n    handleToggle(){\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render(){\n        let result;\n        if (this.state.isEditing) {\n        result = (\n            <div classNames='form'>\n            <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n                <input type='text'value={this.state.task} name='task' onChange={this.handleChange}\n                />\n                <button>Save</button>\n            </form>\n            </div>\n            );\n        } else {\n        result = (\n            <div classNames='task-text'>\n                <li className='Todo-task' onClick={this.handleToggle}>{this.props.task}</li>\n            </div>\n        );\n    }\n    return (\n    <div className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\n        {result}\n        <div className='Todo-buttons'>\n          <button onClick={this.toggleForm}>\n            <i class='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i class='fas fa-trash' />\n          </button>\n        </div>\n    </div>\n    );\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport './TodoForm.css';\n\nclass TodoForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            task: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e){\n        this.setState({ [e.target.name] : e.target.value })\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.createTodo({...this.state, id: uuid(), completed: false });\n        this.setState({ task:\"\" })\n    }\n\n    render(){\n        return (\n            <form className=\"TodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Task:</label>\n                <input type=\"text\" placeholder=\"Task\" id=\"task\" name=\"task\" value={this.state.task} onChange={this.handleChange} />\n                <button>Add</button>\n            </form>\n        )\n    }\n}\n\nexport default TodoForm;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: []\n        };\n        this.create = this.create.bind(this);\n        this.remove = this.remove.bind(this);\n        this.update = this.update.bind(this);\n        this.toggleComplete = this.toggleComplete.bind(this);\n    }\n\n    create(newTodo){\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        })\n    }\n\n    remove(id){\n        this.setState({\n            todos: this.state.todos.filter(todo => todo.id !== id)\n        })\n    }\n\n    update(id, updatedTask){\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id){\n                return {...todo, task: updatedTask}\n            }\n            return todo;\n        });\n        this.setState({ todos : updatedTodos })\n    }\n    \n    toggleComplete(id){\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id){\n                return {...todo, completed: !todo.completed}\n            }\n            return todo;\n        });\n        this.setState({ todos : updatedTodos })\n    }\n\n    render(){\n        const todos = this.state.todos.map(todo => {\n            return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} updateTodo={this.update} completed={todo.completed} toggleTodo={this.toggleComplete}/>\n        })\n        return (<div className=\"TodoList\">\n            <h1>My Todo List</h1>\n            <TodoForm createTodo={this.create} />\n            <ul>{todos}</ul>\n        </div>)\n    }\n}\n\nexport default TodoList;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      toggled: false, \n    };\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(){\n    this.setState({ toggled: !this.state.toggled })\n  }\n\n  render(){\n  let darkStyle = {backgroundColor: this.state.toggled ? 'rgb(46, 45, 45)' : 'white' }\n  return (\n    <div className=\"App\" style={darkStyle}>\n      <div className=\"App-toggle\">\n        <label className=\"switch\" for=\"checkbox\" title=\"Change color scheme to dark mode\">\n          <input type=\"checkbox\" id=\"checkbox\" defaultChecked={this.state.toggled} onChange={this.handleChange}/>\n          <div className=\"slider round\"></div>\n          <div className=\"toggle-moon\"><span role=\"img\" aria-label=\"moon\">🌙</span></div>\n          <div className=\"toggle-sun\"><span role=\"img\" aria-label=\"sun\">☀️</span></div>\n        </label>\n      </div>\n      <TodoList />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}